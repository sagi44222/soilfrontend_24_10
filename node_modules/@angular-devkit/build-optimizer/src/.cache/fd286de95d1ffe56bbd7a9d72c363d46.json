{"remainingRequest":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\smart\\lite_frontend_24_10_2018\\node_modules\\ng2-img-cropper\\src\\model\\cornerMarker.js","dependencies":[{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\ng2-img-cropper\\src\\model\\cornerMarker.js","mtime":1498555521000},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540452592066},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { Handle } from './handle';\r\nvar CornerMarker = /*@__PURE__*/ (function (_super) {\r\n    __extends(CornerMarker, _super);\r\n    function CornerMarker(x, y, radius, cropperSettings) {\r\n        return _super.call(this, x, y, radius, cropperSettings) || this;\r\n    }\r\n    CornerMarker.prototype.drawCornerBorder = function (ctx) {\r\n        var sideLength = 10;\r\n        if (this.over || this.drag) {\r\n            sideLength = 12;\r\n        }\r\n        var hDirection = 1;\r\n        var vDirection = 1;\r\n        if (this.horizontalNeighbour.position.x < this.position.x) {\r\n            hDirection = -1;\r\n        }\r\n        if (this.verticalNeighbour.position.y < this.position.y) {\r\n            vDirection = -1;\r\n        }\r\n        if (this.cropperSettings.rounded) {\r\n            var width = this.position.x - this.horizontalNeighbour.position.x;\r\n            var height = this.position.y - this.verticalNeighbour.position.y;\r\n            var offX = Math.round(Math.sin(Math.PI / 2) * Math.abs(width / 2)) / 4;\r\n            var offY = Math.round(Math.sin(Math.PI / 2) * Math.abs(height / 2)) / 4;\r\n            this.offset.x = hDirection > 0 ? offX : -offX;\r\n            this.offset.y = vDirection > 0 ? offY : -offY;\r\n        }\r\n        else {\r\n            this.offset.x = 0;\r\n            this.offset.y = 0;\r\n        }\r\n        ctx.beginPath();\r\n        ctx.lineJoin = 'miter';\r\n        ctx.moveTo(this.position.x + this.offset.x, this.position.y + this.offset.y);\r\n        ctx.lineTo(this.position.x + this.offset.x + (sideLength * hDirection), this.position.y + this.offset.y);\r\n        ctx.lineTo(this.position.x + this.offset.x + (sideLength * hDirection), this.position.y + this.offset.y +\r\n            (sideLength * vDirection));\r\n        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y + (sideLength * vDirection));\r\n        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y);\r\n        ctx.closePath();\r\n        ctx.lineWidth = this.cropperSettings.cropperDrawSettings.strokeWidth;\r\n        ctx.strokeStyle = this.cropperSettings.cropperDrawSettings.strokeColor;\r\n        ctx.stroke();\r\n    };\r\n    CornerMarker.prototype.drawCornerFill = function (ctx) {\r\n        var sideLength = 10;\r\n        if (this.over || this.drag) {\r\n            sideLength = 12;\r\n        }\r\n        var hDirection = 1;\r\n        var vDirection = 1;\r\n        if (this.horizontalNeighbour.position.x < this.position.x) {\r\n            hDirection = -1;\r\n        }\r\n        if (this.verticalNeighbour.position.y < this.position.y) {\r\n            vDirection = -1;\r\n        }\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.position.x + this.offset.x, this.position.y + this.offset.y);\r\n        ctx.lineTo(this.position.x + this.offset.x + (sideLength * hDirection), this.position.y + this.offset.y);\r\n        ctx.lineTo(this.position.x + this.offset.x + (sideLength * hDirection), this.position.y + this.offset.y +\r\n            (sideLength * vDirection));\r\n        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y + (sideLength * vDirection));\r\n        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y);\r\n        ctx.closePath();\r\n        ctx.fillStyle = 'rgba(255,255,255,.7)';\r\n        ctx.fill();\r\n    };\r\n    CornerMarker.prototype.moveX = function (x) {\r\n        this.setPosition(x, this.position.y);\r\n    };\r\n    CornerMarker.prototype.moveY = function (y) {\r\n        this.setPosition(this.position.x, y);\r\n    };\r\n    CornerMarker.prototype.move = function (x, y) {\r\n        this.setPosition(x, y);\r\n        this.verticalNeighbour.moveX(x);\r\n        this.horizontalNeighbour.moveY(y);\r\n    };\r\n    CornerMarker.prototype.addHorizontalNeighbour = function (neighbour) {\r\n        this.horizontalNeighbour = neighbour;\r\n    };\r\n    CornerMarker.prototype.addVerticalNeighbour = function (neighbour) {\r\n        this.verticalNeighbour = neighbour;\r\n    };\r\n    CornerMarker.prototype.getHorizontalNeighbour = function () {\r\n        return this.horizontalNeighbour;\r\n    };\r\n    CornerMarker.prototype.getVerticalNeighbour = function () {\r\n        return this.verticalNeighbour;\r\n    };\r\n    CornerMarker.prototype.draw = function (ctx) {\r\n        this.drawCornerFill(ctx);\r\n        this.drawCornerBorder(ctx);\r\n    };\r\n    return CornerMarker;\r\n}(Handle));\r\nexport { CornerMarker };\r\n//# sourceMappingURL=cornerMarker.js.map \r\n",null]}