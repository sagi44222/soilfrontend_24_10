{"remainingRequest":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\smart\\lite_frontend_24_10_2018\\node_modules\\primeng\\components\\utils\\objectutils.js","dependencies":[{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\primeng\\components\\utils\\objectutils.js","mtime":1539610087000},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540452592066},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar ObjectUtils = /*@__PURE__*/ (function () {\n    function ObjectUtils() {\n        this.isFunction = function (obj) { return !!(obj && obj.constructor && obj.call && obj.apply); };\n    }\n    ObjectUtils.prototype.equals = function (obj1, obj2, field) {\n        if (field)\n            return (this.resolveFieldData(obj1, field) === this.resolveFieldData(obj2, field));\n        else\n            return this.equalsByValue(obj1, obj2);\n    };\n    ObjectUtils.prototype.equalsByValue = function (obj1, obj2, visited) {\n        if (obj1 == null && obj2 == null) {\n            return true;\n        }\n        if (obj1 == null || obj2 == null) {\n            return false;\n        }\n        if (obj1 == obj2) {\n            return true;\n        }\n        if (obj1 instanceof Date && obj2 instanceof Date) {\n            return obj1.getTime() == obj2.getTime();\n        }\n        if (typeof obj1 == 'object' && typeof obj2 == 'object') {\n            if (visited) {\n                if (visited.indexOf(obj1) !== -1)\n                    return false;\n            }\n            else {\n                visited = [];\n            }\n            visited.push(obj1);\n            for (var p in obj1) {\n                if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) {\n                    return false;\n                }\n                switch (typeof (obj1[p])) {\n                    case 'object':\n                        if (!this.equalsByValue(obj1[p], obj2[p], visited))\n                            return false;\n                        break;\n                    case 'function':\n                        if (typeof (obj2[p]) == 'undefined' || (p != 'compare' && obj1[p].toString() != obj2[p].toString()))\n                            return false;\n                        break;\n                    default:\n                        if (obj1[p] != obj2[p])\n                            return false;\n                        break;\n                }\n            }\n            for (var p in obj2) {\n                if (typeof (obj1[p]) == 'undefined')\n                    return false;\n            }\n            delete obj1._$visited;\n            return true;\n        }\n        return false;\n    };\n    ObjectUtils.prototype.resolveFieldData = function (data, field) {\n        if (data && field) {\n            if (this.isFunction(field)) {\n                return field(data);\n            }\n            else if (field.indexOf('.') == -1) {\n                return data[field];\n            }\n            else {\n                var fields = field.split('.');\n                var value = data;\n                for (var i = 0, len = fields.length; i < len; ++i) {\n                    if (value == null) {\n                        return null;\n                    }\n                    value = value[fields[i]];\n                }\n                return value;\n            }\n        }\n        else {\n            return null;\n        }\n    };\n    ObjectUtils.prototype.filter = function (value, fields, filterValue) {\n        var filteredItems = [];\n        if (value) {\n            for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {\n                var item = value_1[_i];\n                for (var _a = 0, fields_1 = fields; _a < fields_1.length; _a++) {\n                    var field = fields_1[_a];\n                    if (String(this.resolveFieldData(item, field)).toLowerCase().indexOf(filterValue.toLowerCase()) > -1) {\n                        filteredItems.push(item);\n                        break;\n                    }\n                }\n            }\n        }\n        return filteredItems;\n    };\n    ObjectUtils.prototype.reorderArray = function (value, from, to) {\n        var target;\n        if (value && (from !== to)) {\n            if (to >= value.length) {\n                target = to - value.length;\n                while ((target--) + 1) {\n                    value.push(undefined);\n                }\n            }\n            value.splice(to, 0, value.splice(from, 1)[0]);\n        }\n    };\n    ObjectUtils.prototype.generateSelectItems = function (val, field) {\n        var selectItems;\n        if (val && val.length) {\n            selectItems = [];\n            for (var _i = 0, val_1 = val; _i < val_1.length; _i++) {\n                var item = val_1[_i];\n                selectItems.push({ label: this.resolveFieldData(item, field), value: item });\n            }\n        }\n        return selectItems;\n    };\n    ObjectUtils.prototype.insertIntoOrderedArray = function (item, index, arr, sourceArr) {\n        if (arr.length > 0) {\n            var injected = false;\n            for (var i = 0; i < arr.length; i++) {\n                var currentItemIndex = this.findIndexInList(arr[i], sourceArr);\n                if (currentItemIndex > index) {\n                    arr.splice(i, 0, item);\n                    injected = true;\n                    break;\n                }\n            }\n            if (!injected) {\n                arr.push(item);\n            }\n        }\n        else {\n            arr.push(item);\n        }\n    };\n    ObjectUtils.prototype.findIndexInList = function (item, list) {\n        var index = -1;\n        if (list) {\n            for (var i = 0; i < list.length; i++) {\n                if (list[i] == item) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    };\n    ObjectUtils = __decorate([\n        core_1.Injectable()\n    ], ObjectUtils);\n    return ObjectUtils;\n}());\nexports.ObjectUtils = ObjectUtils;\n",null]}