{"remainingRequest":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\smart\\lite_frontend_24_10_2018\\node_modules\\ng2-completer\\esm5\\ng2-completer.js","dependencies":[{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\ng2-completer\\esm5\\ng2-completer.js","mtime":1529660206000},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540452592066},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/**\n * @license ng2-completer\n * MIT license\n */\nimport { __extends } from 'tslib';\nimport { ChangeDetectorRef, Component, Directive, ElementRef, EventEmitter, Host, HostListener, Injectable, Input, NgModule, Output, Renderer, TemplateRef, ViewChild, ViewContainerRef, forwardRef } from '@angular/core';\nimport { Observable as Observable$1 } from 'rxjs/Observable';\nimport { catchError, map, take } from 'rxjs/operators';\nimport { Subject as Subject$1 } from 'rxjs/Subject';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { FormControl, FormsModule, NG_VALUE_ACCESSOR, NgModel } from '@angular/forms';\nimport { timer as timer$1 } from 'rxjs/observable/timer';\nimport 'rxjs/add/operator/catch';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MAX_CHARS = 524288; // the default max length per the html maxlength attribute\nvar MIN_SEARCH_LENGTH = 3;\nvar PAUSE = 10;\nvar TEXT_SEARCHING = \"Searching...\";\nvar TEXT_NO_RESULTS = \"No results found\";\nvar CLEAR_TIMEOUT = 50;\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isNil(value) {\n    return typeof value === \"undefined\" || value === null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n */\nvar CompleterBaseData = /*@__PURE__*/ (function (_super) {\n    __extends(CompleterBaseData, _super);\n    function CompleterBaseData() {\n        return _super.call(this) || this;\n    }\n    /**\n     * @return {?}\n     */\n    CompleterBaseData.prototype.cancel = /**\n     * @return {?}\n     */\n        function () {\n            return;\n        };\n    /**\n     * @param {?} searchFields\n     * @return {?}\n     */\n    CompleterBaseData.prototype.searchFields = /**\n     * @param {?} searchFields\n     * @return {?}\n     */\n        function (searchFields) {\n            this._searchFields = searchFields;\n            return this;\n        };\n    /**\n     * @param {?} titleField\n     * @return {?}\n     */\n    CompleterBaseData.prototype.titleField = /**\n     * @param {?} titleField\n     * @return {?}\n     */\n        function (titleField) {\n            this._titleField = titleField;\n            return this;\n        };\n    /**\n     * @param {?} descriptionField\n     * @return {?}\n     */\n    CompleterBaseData.prototype.descriptionField = /**\n     * @param {?} descriptionField\n     * @return {?}\n     */\n        function (descriptionField) {\n            this._descriptionField = descriptionField;\n            return this;\n        };\n    /**\n     * @param {?} imageField\n     * @return {?}\n     */\n    CompleterBaseData.prototype.imageField = /**\n     * @param {?} imageField\n     * @return {?}\n     */\n        function (imageField) {\n            this._imageField = imageField;\n            return this;\n        };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    CompleterBaseData.prototype.convertToItem = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            var /** @type {?} */ image = null;\n            var /** @type {?} */ formattedText;\n            var /** @type {?} */ formattedDesc = null;\n            if (this._titleField) {\n                formattedText = this.extractTitle(data);\n            }\n            else {\n                formattedText = data;\n            }\n            if (typeof formattedText !== \"string\") {\n                formattedText = JSON.stringify(formattedText);\n            }\n            if (this._descriptionField) {\n                formattedDesc = this.extractValue(data, this._descriptionField);\n            }\n            if (this._imageField) {\n                image = this.extractValue(data, this._imageField);\n            }\n            if (isNil(formattedText)) {\n                return null;\n            }\n            return /** @type {?} */ ({\n                description: formattedDesc,\n                image: image,\n                originalObject: data,\n                title: formattedText\n            });\n        };\n    /**\n     * @param {?} data\n     * @param {?} term\n     * @return {?}\n     */\n    CompleterBaseData.prototype.extractMatches = /**\n     * @param {?} data\n     * @param {?} term\n     * @return {?}\n     */\n        function (data, term) {\n            var _this = this;\n            var /** @type {?} */ matches = [];\n            var /** @type {?} */ searchFields = this._searchFields ? this._searchFields.split(\",\") : null;\n            if (this._searchFields !== null && this._searchFields !== undefined && term !== \"\") {\n                matches = data.filter(function (item) {\n                    var /** @type {?} */ values = searchFields ? _this.extractBySearchFields(searchFields, item) : [item];\n                    return values.some(function (value) {\n                        return value\n                            .toString()\n                            .toLowerCase()\n                            .indexOf(term.toString().toLowerCase()) >= 0;\n                    });\n                });\n            }\n            else {\n                matches = data;\n            }\n            return matches;\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    CompleterBaseData.prototype.extractTitle = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            var _this = this;\n            // split title fields and run extractValue for each and join with ' '\n            if (!this._titleField) {\n                return \"\";\n            }\n            return this._titleField.split(\",\")\n                .map(function (field) {\n                return _this.extractValue(item, field);\n            })\n                .reduce(function (acc, titlePart) { return acc ? acc + \" \" + titlePart : titlePart; });\n        };\n    /**\n     * @param {?} obj\n     * @param {?} key\n     * @return {?}\n     */\n    CompleterBaseData.prototype.extractValue = /**\n     * @param {?} obj\n     * @param {?} key\n     * @return {?}\n     */\n        function (obj, key) {\n            var /** @type {?} */ keys;\n            var /** @type {?} */ result;\n            if (key) {\n                keys = key.split(\".\");\n                result = obj;\n                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                    key = keys_1[_i];\n                    if (result) {\n                        result = result[key];\n                    }\n                }\n            }\n            else {\n                result = obj;\n            }\n            return result;\n        };\n    /**\n     * @param {?} matches\n     * @return {?}\n     */\n    CompleterBaseData.prototype.processResults = /**\n     * @param {?} matches\n     * @return {?}\n     */\n        function (matches) {\n            var /** @type {?} */ i;\n            var /** @type {?} */ results = [];\n            if (matches && matches.length > 0) {\n                for (i = 0; i < matches.length; i++) {\n                    var /** @type {?} */ item = this.convertToItem(matches[i]);\n                    if (item) {\n                        results.push(item);\n                    }\n                }\n            }\n            return results;\n        };\n    /**\n     * @param {?} searchFields\n     * @param {?} item\n     * @return {?}\n     */\n    CompleterBaseData.prototype.extractBySearchFields = /**\n     * @param {?} searchFields\n     * @param {?} item\n     * @return {?}\n     */\n        function (searchFields, item) {\n            var _this = this;\n            return searchFields\n                .map(function (searchField) { return _this.extractValue(item, searchField); }).filter(function (value) { return !!value; });\n        };\n    return CompleterBaseData;\n}(Subject$1));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar LocalData = /*@__PURE__*/ (function (_super) {\n    __extends(LocalData, _super);\n    function LocalData() {\n        var _this = _super.call(this) || this;\n        _this.dataSourceChange = new EventEmitter();\n        return _this;\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    LocalData.prototype.data = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            var _this = this;\n            if (data instanceof Observable$1) {\n                var /** @type {?} */ data$ = (data);\n                data$\n                    .pipe(catchError(function () { return []; }))\n                    .subscribe(function (res) {\n                    _this._data = res;\n                    if (_this.savedTerm) {\n                        _this.search(_this.savedTerm);\n                    }\n                    _this.dataSourceChange.emit();\n                });\n            }\n            else {\n                this._data = data;\n            }\n            this.dataSourceChange.emit();\n            return this;\n        };\n    /**\n     * @param {?} term\n     * @return {?}\n     */\n    LocalData.prototype.search = /**\n     * @param {?} term\n     * @return {?}\n     */\n        function (term) {\n            if (!this._data) {\n                this.savedTerm = term;\n            }\n            else {\n                this.savedTerm = null;\n                var /** @type {?} */ matches = this.extractMatches(this._data, term);\n                this.next(this.processResults(matches));\n            }\n        };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    LocalData.prototype.convertToItem = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            return _super.prototype.convertToItem.call(this, data);\n        };\n    return LocalData;\n}(CompleterBaseData));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar RemoteData = /*@__PURE__*/ (function (_super) {\n    __extends(RemoteData, _super);\n    function RemoteData(http$$1) {\n        var _this = _super.call(this) || this;\n        _this.http = http$$1;\n        _this.dataSourceChange = new EventEmitter();\n        _this._urlFormater = null;\n        _this._dataField = null;\n        return _this;\n    }\n    /**\n     * @param {?} remoteUrl\n     * @return {?}\n     */\n    RemoteData.prototype.remoteUrl = /**\n     * @param {?} remoteUrl\n     * @return {?}\n     */\n        function (remoteUrl) {\n            this._remoteUrl = remoteUrl;\n            this.dataSourceChange.emit();\n            return this;\n        };\n    /**\n     * @param {?} urlFormater\n     * @return {?}\n     */\n    RemoteData.prototype.urlFormater = /**\n     * @param {?} urlFormater\n     * @return {?}\n     */\n        function (urlFormater) {\n            this._urlFormater = urlFormater;\n        };\n    /**\n     * @param {?} dataField\n     * @return {?}\n     */\n    RemoteData.prototype.dataField = /**\n     * @param {?} dataField\n     * @return {?}\n     */\n        function (dataField) {\n            this._dataField = dataField;\n        };\n    /**\n     * @param {?} requestOptions\n     * @return {?}\n     */\n    RemoteData.prototype.requestOptions = /**\n     * @param {?} requestOptions\n     * @return {?}\n     */\n        function (requestOptions) {\n            this._requestOptions = requestOptions;\n        };\n    /**\n     * @param {?} term\n     * @return {?}\n     */\n    RemoteData.prototype.search = /**\n     * @param {?} term\n     * @return {?}\n     */\n        function (term) {\n            var _this = this;\n            this.cancel();\n            // let params = {};\n            var /** @type {?} */ url = \"\";\n            if (this._urlFormater) {\n                url = this._urlFormater(term);\n            }\n            else {\n                url = this._remoteUrl + encodeURIComponent(term);\n            }\n            this.remoteSearch = this.http\n                .get(url, Object.assign({}, this._requestOptions))\n                .pipe(map(function (data) {\n                var /** @type {?} */ matches = _this.extractValue(data, _this._dataField);\n                return _this.extractMatches(matches, term);\n            }), catchError(function () { return []; }))\n                .subscribe(function (matches) {\n                var /** @type {?} */ results = _this.processResults(matches);\n                _this.next(results);\n            });\n        };\n    /**\n     * @return {?}\n     */\n    RemoteData.prototype.cancel = /**\n     * @return {?}\n     */\n        function () {\n            if (this.remoteSearch) {\n                this.remoteSearch.unsubscribe();\n            }\n        };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    RemoteData.prototype.convertToItem = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            return _super.prototype.convertToItem.call(this, data);\n        };\n    return RemoteData;\n}(CompleterBaseData));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar LocalDataFactory = /*@__PURE__*/ (function () {\n    function LocalDataFactory() {\n    }\n    /**\n     * @return {?}\n     */\n    LocalDataFactory.prototype.create = /**\n     * @return {?}\n     */\n        function () {\n            return new LocalData();\n        };\n    return LocalDataFactory;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar RemoteDataFactory = /*@__PURE__*/ (function () {\n    function RemoteDataFactory(http$$1) {\n        this.http = http$$1;\n    }\n    /**\n     * @return {?}\n     */\n    RemoteDataFactory.prototype.create = /**\n     * @return {?}\n     */\n        function () {\n            return new RemoteData(this.http);\n        };\n    return RemoteDataFactory;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CompleterService = /*@__PURE__*/ (function () {\n    function CompleterService(localDataFactory, remoteDataFactory // Using any instead of () => LocalData because of AoT errors\n    ) {\n        this.localDataFactory = localDataFactory;\n        this.remoteDataFactory = remoteDataFactory;\n    }\n    /**\n     * @param {?} data\n     * @param {?=} searchFields\n     * @param {?=} titleField\n     * @return {?}\n     */\n    CompleterService.prototype.local = /**\n     * @param {?} data\n     * @param {?=} searchFields\n     * @param {?=} titleField\n     * @return {?}\n     */\n        function (data, searchFields, titleField) {\n            if (searchFields === void 0) {\n                searchFields = \"\";\n            }\n            if (titleField === void 0) {\n                titleField = \"\";\n            }\n            var /** @type {?} */ localData = this.localDataFactory.create();\n            return localData\n                .data(data)\n                .searchFields(searchFields)\n                .titleField(titleField);\n        };\n    /**\n     * @param {?} url\n     * @param {?=} searchFields\n     * @param {?=} titleField\n     * @return {?}\n     */\n    CompleterService.prototype.remote = /**\n     * @param {?} url\n     * @param {?=} searchFields\n     * @param {?=} titleField\n     * @return {?}\n     */\n        function (url, searchFields, titleField) {\n            if (searchFields === void 0) {\n                searchFields = \"\";\n            }\n            if (titleField === void 0) {\n                titleField = \"\";\n            }\n            var /** @type {?} */ remoteData = this.remoteDataFactory.create();\n            return remoteData\n                .remoteUrl(url)\n                .searchFields(searchFields)\n                .titleField(titleField);\n        };\n    return CompleterService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\n/**\n * @record\n */\nvar CtrCompleter = /*@__PURE__*/ (function () {\n    function CtrCompleter() {\n        this.selected = new EventEmitter();\n        this.highlighted = new EventEmitter();\n        this.opened = new EventEmitter();\n        this.dataSourceChange = new EventEmitter();\n        this._hasHighlighted = false;\n        this._hasSelected = false;\n        this._cancelBlur = false;\n        this._isOpen = false;\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    CtrCompleter.prototype.registerList = /**\n     * @param {?} list\n     * @return {?}\n     */\n        function (list) {\n            this.list = list;\n        };\n    /**\n     * @param {?} dropdown\n     * @return {?}\n     */\n    CtrCompleter.prototype.registerDropdown = /**\n     * @param {?} dropdown\n     * @return {?}\n     */\n        function (dropdown) {\n            this.dropdown = dropdown;\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    CtrCompleter.prototype.onHighlighted = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            this.highlighted.emit(item);\n            this._hasHighlighted = !!item;\n        };\n    /**\n     * @param {?} item\n     * @param {?=} clearList\n     * @return {?}\n     */\n    CtrCompleter.prototype.onSelected = /**\n     * @param {?} item\n     * @param {?=} clearList\n     * @return {?}\n     */\n        function (item, clearList) {\n            if (clearList === void 0) {\n                clearList = true;\n            }\n            this.selected.emit(item);\n            if (item) {\n                this._hasSelected = true;\n            }\n            if (clearList) {\n                this.clear();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrCompleter.prototype.onDataSourceChange = /**\n     * @return {?}\n     */\n        function () {\n            if (this.hasSelected) {\n                this.selected.emit(null);\n                this._hasSelected = false;\n            }\n            this.dataSourceChange.emit();\n        };\n    /**\n     * @param {?} term\n     * @return {?}\n     */\n    CtrCompleter.prototype.search = /**\n     * @param {?} term\n     * @return {?}\n     */\n        function (term) {\n            if (this._hasSelected) {\n                this.selected.emit(null);\n                this._hasSelected = false;\n            }\n            if (this.list) {\n                this.list.search(term);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrCompleter.prototype.clear = /**\n     * @return {?}\n     */\n        function () {\n            this._hasHighlighted = false;\n            this.isOpen = false;\n            if (this.dropdown) {\n                this.dropdown.clear();\n            }\n            if (this.list) {\n                this.list.clear();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrCompleter.prototype.selectCurrent = /**\n     * @return {?}\n     */\n        function () {\n            if (this.dropdown) {\n                this.dropdown.selectCurrent();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrCompleter.prototype.nextRow = /**\n     * @return {?}\n     */\n        function () {\n            if (this.dropdown) {\n                this.dropdown.nextRow();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrCompleter.prototype.prevRow = /**\n     * @return {?}\n     */\n        function () {\n            if (this.dropdown) {\n                this.dropdown.prevRow();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrCompleter.prototype.hasHighlighted = /**\n     * @return {?}\n     */\n        function () {\n            return this._hasHighlighted;\n        };\n    /**\n     * @param {?} cancel\n     * @return {?}\n     */\n    CtrCompleter.prototype.cancelBlur = /**\n     * @param {?} cancel\n     * @return {?}\n     */\n        function (cancel) {\n            this._cancelBlur = cancel;\n        };\n    /**\n     * @return {?}\n     */\n    CtrCompleter.prototype.isCancelBlur = /**\n     * @return {?}\n     */\n        function () {\n            return this._cancelBlur;\n        };\n    /**\n     * @return {?}\n     */\n    CtrCompleter.prototype.open = /**\n     * @return {?}\n     */\n        function () {\n            if (!this._isOpen) {\n                this.isOpen = true;\n                this.list.open();\n            }\n        };\n    Object.defineProperty(CtrCompleter.prototype, \"isOpen\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._isOpen;\n        },\n        set: /**\n         * @param {?} open\n         * @return {?}\n         */ function (open) {\n            this._isOpen = open;\n            this.opened.emit(this._isOpen);\n            if (this.list) {\n                this.list.isOpen(open);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CtrCompleter.prototype, \"autoHighlightIndex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._autoHighlightIndex;\n        },\n        set: /**\n         * @param {?} index\n         * @return {?}\n         */ function (index) {\n            this._autoHighlightIndex = index;\n            if (this.dropdown) {\n                this.dropdown.highlightRow(this._autoHighlightIndex);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CtrCompleter.prototype, \"hasSelected\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._hasSelected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CtrCompleter;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\nvar CtrRowItem = /*@__PURE__*/ (function () {\n    function CtrRowItem(row, index) {\n        this.row = row;\n        this.index = index;\n    }\n    return CtrRowItem;\n}());\nvar CtrDropdown = /*@__PURE__*/ (function () {\n    function CtrDropdown(completer, el) {\n        this.completer = completer;\n        this.el = el;\n        this.rows = [];\n        this._rowMouseDown = false;\n        this.completer.registerDropdown(this);\n    }\n    /**\n     * @return {?}\n     */\n    CtrDropdown.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.completer.registerDropdown(null);\n        };\n    /**\n     * @return {?}\n     */\n    CtrDropdown.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ css = getComputedStyle(this.el.nativeElement);\n            var /** @type {?} */ autoHighlightIndex = this.completer.autoHighlightIndex;\n            this.isScrollOn = !!css.maxHeight && css.overflowY === \"auto\";\n            if (autoHighlightIndex) {\n                setTimeout(function () {\n                    _this.highlightRow(autoHighlightIndex);\n                }, 0);\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CtrDropdown.prototype.onMouseDown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var _this = this;\n            // Support for canceling blur on IE (issue #158)\n            if (!this._rowMouseDown) {\n                this.completer.cancelBlur(true);\n                setTimeout(function () {\n                    _this.completer.cancelBlur(false);\n                }, 0);\n            }\n            else {\n                this._rowMouseDown = false;\n            }\n        };\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    CtrDropdown.prototype.registerRow = /**\n     * @param {?} row\n     * @return {?}\n     */\n        function (row) {\n            var /** @type {?} */ arrIndex = this.rows.findIndex(function (_row) { return _row.index === row.index; });\n            if (arrIndex >= 0) {\n                this.rows[arrIndex] = row;\n            }\n            else {\n                this.rows.push(row);\n            }\n        };\n    /**\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    CtrDropdown.prototype.unregisterRow = /**\n     * @param {?} rowIndex\n     * @return {?}\n     */\n        function (rowIndex) {\n            var /** @type {?} */ arrIndex = this.rows.findIndex(function (_row) { return _row.index === rowIndex; });\n            this.rows.splice(arrIndex, 1);\n            if (this.currHighlighted && rowIndex === this.currHighlighted.index) {\n                this.highlightRow(null);\n            }\n        };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    CtrDropdown.prototype.highlightRow = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            var /** @type {?} */ highlighted = this.rows.find(function (row) { return row.index === index; });\n            if (isNil(index) || /** @type {?} */ ((index)) < 0) {\n                if (this.currHighlighted) {\n                    this.currHighlighted.row.setHighlighted(false);\n                }\n                this.currHighlighted = undefined;\n                this.completer.onHighlighted(null);\n                return;\n            }\n            if (!highlighted) {\n                return;\n            }\n            if (this.currHighlighted) {\n                this.currHighlighted.row.setHighlighted(false);\n            }\n            this.currHighlighted = highlighted;\n            this.currHighlighted.row.setHighlighted(true);\n            this.completer.onHighlighted(this.currHighlighted.row.getDataItem());\n            if (this.isScrollOn && this.currHighlighted) {\n                var /** @type {?} */ rowTop = this.dropdownRowTop();\n                if (!rowTop) {\n                    return;\n                }\n                if (rowTop < 0) {\n                    this.dropdownScrollTopTo(rowTop - 1);\n                }\n                else {\n                    var /** @type {?} */ row = this.currHighlighted.row.getNativeElement();\n                    if (this.dropdownHeight() < row.getBoundingClientRect().bottom) {\n                        this.dropdownScrollTopTo(this.dropdownRowOffsetHeight(row));\n                        if (this.el.nativeElement.getBoundingClientRect().bottom - this.dropdownRowOffsetHeight(row) < row.getBoundingClientRect().top) {\n                            this.dropdownScrollTopTo(row.getBoundingClientRect().top - (this.el.nativeElement.getBoundingClientRect().top + parseInt(/** @type {?} */ (getComputedStyle(this.el.nativeElement).paddingTop), 10)));\n                        }\n                    }\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrDropdown.prototype.clear = /**\n     * @return {?}\n     */\n        function () {\n            this.rows = [];\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    CtrDropdown.prototype.onSelected = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            this.completer.onSelected(item);\n        };\n    /**\n     * @return {?}\n     */\n    CtrDropdown.prototype.rowMouseDown = /**\n     * @return {?}\n     */\n        function () {\n            this._rowMouseDown = true;\n        };\n    /**\n     * @return {?}\n     */\n    CtrDropdown.prototype.selectCurrent = /**\n     * @return {?}\n     */\n        function () {\n            if (this.currHighlighted) {\n                this.onSelected(this.currHighlighted.row.getDataItem());\n            }\n            else if (this.rows.length > 0) {\n                this.onSelected(this.rows[0].row.getDataItem());\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrDropdown.prototype.nextRow = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ nextRowIndex = 0;\n            if (this.currHighlighted) {\n                nextRowIndex = this.currHighlighted.index + 1;\n            }\n            this.highlightRow(nextRowIndex);\n        };\n    /**\n     * @return {?}\n     */\n    CtrDropdown.prototype.prevRow = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ nextRowIndex = -1;\n            if (this.currHighlighted) {\n                nextRowIndex = this.currHighlighted.index - 1;\n            }\n            this.highlightRow(nextRowIndex);\n        };\n    /**\n     * @param {?} offset\n     * @return {?}\n     */\n    CtrDropdown.prototype.dropdownScrollTopTo = /**\n     * @param {?} offset\n     * @return {?}\n     */\n        function (offset) {\n            this.el.nativeElement.scrollTop = this.el.nativeElement.scrollTop + offset;\n        };\n    /**\n     * @return {?}\n     */\n    CtrDropdown.prototype.dropdownRowTop = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.currHighlighted) {\n                return;\n            }\n            return this.currHighlighted.row.getNativeElement().getBoundingClientRect().top -\n                (this.el.nativeElement.getBoundingClientRect().top +\n                    parseInt(/** @type {?} */ (getComputedStyle(this.el.nativeElement).paddingTop), 10));\n        };\n    /**\n     * @return {?}\n     */\n    CtrDropdown.prototype.dropdownHeight = /**\n     * @return {?}\n     */\n        function () {\n            return this.el.nativeElement.getBoundingClientRect().top +\n                parseInt(/** @type {?} */ (getComputedStyle(this.el.nativeElement).maxHeight), 10);\n        };\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    CtrDropdown.prototype.dropdownRowOffsetHeight = /**\n     * @param {?} row\n     * @return {?}\n     */\n        function (row) {\n            var /** @type {?} */ css = getComputedStyle(row.parentElement);\n            return row.parentElement.offsetHeight +\n                parseInt(/** @type {?} */ (css.marginTop), 10) + parseInt(/** @type {?} */ (css.marginBottom), 10);\n        };\n    return CtrDropdown;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// keyboard events\nvar KEY_DW = 40;\nvar KEY_RT = 39;\nvar KEY_UP = 38;\nvar KEY_LF = 37;\nvar KEY_ES = 27;\nvar KEY_EN = 13;\nvar KEY_TAB = 9;\nvar KEY_BK = 8;\nvar KEY_SH = 16;\nvar KEY_CL = 20;\nvar KEY_F1 = 112;\nvar KEY_F12 = 123;\nvar CtrInput = /*@__PURE__*/ (function () {\n    function CtrInput(completer, ngModel, el) {\n        var _this = this;\n        this.completer = completer;\n        this.ngModel = ngModel;\n        this.el = el;\n        this.clearSelected = false;\n        this.clearUnselected = false;\n        this.overrideSuggested = false;\n        this.fillHighlighted = true;\n        this.openOnFocus = false;\n        this.openOnClick = false;\n        this.selectOnClick = false;\n        this.selectOnFocus = false;\n        this.ngModelChange = new EventEmitter();\n        this._searchStr = \"\";\n        this._displayStr = \"\";\n        this.blurTimer = null;\n        this.completer.selected.subscribe(function (item) {\n            if (!item) {\n                return;\n            }\n            if (_this.clearSelected) {\n                _this.searchStr = \"\";\n            }\n            else {\n                _this.searchStr = item.title;\n            }\n            _this.ngModelChange.emit(_this.searchStr);\n        });\n        this.completer.highlighted.subscribe(function (item) {\n            if (_this.fillHighlighted) {\n                if (item) {\n                    _this._displayStr = item.title;\n                    _this.ngModelChange.emit(item.title);\n                }\n                else {\n                    _this._displayStr = _this.searchStr;\n                    _this.ngModelChange.emit(_this.searchStr);\n                }\n            }\n        });\n        this.completer.dataSourceChange.subscribe(function () {\n            _this.completer.search(_this.searchStr);\n        });\n        if (this.ngModel.valueChanges) {\n            this.ngModel.valueChanges.subscribe(function (value) {\n                if (!isNil(value) && _this._displayStr !== value) {\n                    if (_this.searchStr !== value) {\n                        _this.completer.search(value);\n                    }\n                    _this.searchStr = value;\n                }\n            });\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CtrInput.prototype.keyupHandler = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (event.keyCode === KEY_LF || event.keyCode === KEY_RT || event.keyCode === KEY_TAB) {\n                // do nothing\n                return;\n            }\n            if (event.keyCode === KEY_UP || event.keyCode === KEY_EN) {\n                event.preventDefault();\n            }\n            else if (event.keyCode === KEY_DW) {\n                event.preventDefault();\n                this.completer.search(this.searchStr);\n            }\n            else if (event.keyCode === KEY_ES) {\n                if (this.completer.isOpen) {\n                    this.restoreSearchValue();\n                    this.completer.clear();\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CtrInput.prototype.pasteHandler = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.completer.open();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CtrInput.prototype.keydownHandler = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var /** @type {?} */ keyCode = event.keyCode || event.which;\n            if (keyCode === KEY_EN) {\n                if (this.completer.hasHighlighted()) {\n                    event.preventDefault();\n                }\n                this.handleSelection();\n            }\n            else if (keyCode === KEY_DW) {\n                event.preventDefault();\n                this.completer.open();\n                this.completer.nextRow();\n            }\n            else if (keyCode === KEY_UP) {\n                event.preventDefault();\n                this.completer.prevRow();\n            }\n            else if (keyCode === KEY_TAB) {\n                this.handleSelection();\n            }\n            else if (keyCode === KEY_BK) {\n                this.completer.open();\n            }\n            else if (keyCode === KEY_ES) {\n                // This is very specific to IE10/11 #272\n                // without this, IE clears the input text\n                event.preventDefault();\n                if (this.completer.isOpen) {\n                    event.stopPropagation();\n                }\n            }\n            else {\n                if (keyCode !== 0 && keyCode !== KEY_SH && keyCode !== KEY_CL &&\n                    (keyCode <= KEY_F1 || keyCode >= KEY_F12) &&\n                    !event.ctrlKey && !event.metaKey && !event.altKey) {\n                    this.completer.open();\n                }\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CtrInput.prototype.onBlur = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var _this = this;\n            // Check if we need to cancel Blur for IE\n            if (this.completer.isCancelBlur()) {\n                setTimeout(function () {\n                    // get the focus back\n                    // get the focus back\n                    _this.el.nativeElement.focus();\n                }, 0);\n                return;\n            }\n            if (this.completer.isOpen) {\n                this.blurTimer = timer$1(200).pipe(take(1)).subscribe(function () { return _this.doBlur(); });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrInput.prototype.onfocus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.blurTimer) {\n                this.blurTimer.unsubscribe();\n                this.blurTimer = null;\n            }\n            if (this.selectOnFocus) {\n                this.el.nativeElement.select();\n            }\n            if (this.openOnFocus) {\n                this.completer.open();\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CtrInput.prototype.onClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (this.selectOnClick) {\n                this.el.nativeElement.select();\n            }\n            if (this.openOnClick) {\n                if (this.completer.isOpen) {\n                    this.completer.clear();\n                }\n                else {\n                    this.completer.open();\n                }\n            }\n        };\n    Object.defineProperty(CtrInput.prototype, \"searchStr\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._searchStr;\n        },\n        set: /**\n         * @param {?} term\n         * @return {?}\n         */ function (term) {\n            this._searchStr = term;\n            this._displayStr = term;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CtrInput.prototype.handleSelection = /**\n     * @return {?}\n     */\n        function () {\n            if (this.completer.hasHighlighted()) {\n                this._searchStr = \"\";\n                this.completer.selectCurrent();\n            }\n            else if (this.overrideSuggested) {\n                this.completer.onSelected({ title: this.searchStr, originalObject: null });\n            }\n            else {\n                if (this.clearUnselected && !this.completer.hasSelected) {\n                    this.searchStr = \"\";\n                    this.ngModelChange.emit(this.searchStr);\n                }\n                this.completer.clear();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrInput.prototype.restoreSearchValue = /**\n     * @return {?}\n     */\n        function () {\n            if (this.fillHighlighted) {\n                if (this._displayStr != this.searchStr) {\n                    this._displayStr = this.searchStr;\n                    this.ngModelChange.emit(this.searchStr);\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrInput.prototype.doBlur = /**\n     * @return {?}\n     */\n        function () {\n            if (this.blurTimer) {\n                this.blurTimer.unsubscribe();\n                this.blurTimer = null;\n            }\n            if (this.overrideSuggested) {\n                this.completer.onSelected({ title: this.searchStr, originalObject: null });\n            }\n            else {\n                if (this.clearUnselected && !this.completer.hasSelected) {\n                    this.searchStr = \"\";\n                    this.ngModelChange.emit(this.searchStr);\n                }\n                else {\n                    this.restoreSearchValue();\n                }\n            }\n            this.completer.clear();\n        };\n    return CtrInput;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CtrListContext = /*@__PURE__*/ (function () {\n    function CtrListContext(results, searching, searchInitialized, isOpen) {\n        this.results = results;\n        this.searching = searching;\n        this.searchInitialized = searchInitialized;\n        this.isOpen = isOpen;\n    }\n    return CtrListContext;\n}());\nvar CtrList = /*@__PURE__*/ (function () {\n    function CtrList(completer, templateRef, viewContainer, cd) {\n        this.completer = completer;\n        this.templateRef = templateRef;\n        this.viewContainer = viewContainer;\n        this.cd = cd;\n        this.ctrListMinSearchLength = MIN_SEARCH_LENGTH;\n        this.ctrListPause = PAUSE;\n        this.ctrListAutoMatch = false;\n        this.ctrListAutoHighlight = false;\n        this.ctrListDisplaySearching = true;\n        this.term = null;\n        this.searchTimer = null;\n        this.clearTimer = null;\n        this.ctx = new CtrListContext([], false, false, false);\n        this._initialValue = null;\n        this.viewRef = null;\n    }\n    /**\n     * @return {?}\n     */\n    CtrList.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.completer.registerList(this);\n            this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, new CtrListContext([], false, false, false));\n        };\n    Object.defineProperty(CtrList.prototype, \"dataService\", {\n        set: /**\n         * @param {?} newService\n         * @return {?}\n         */ function (newService) {\n            this._dataService = newService;\n            this.dataServiceSubscribe();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CtrList.prototype, \"initialValue\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            var _this = this;\n            if (this._dataService && typeof this._dataService.convertToItem === \"function\") {\n                setTimeout(function () {\n                    var /** @type {?} */ initialItem = ((_this._dataService.convertToItem))(value);\n                    if (initialItem) {\n                        _this.completer.onSelected(initialItem, false);\n                    }\n                });\n            }\n            else if (!this._dataService) {\n                this._initialValue = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} term\n     * @return {?}\n     */\n    CtrList.prototype.search = /**\n     * @param {?} term\n     * @return {?}\n     */\n        function (term) {\n            var _this = this;\n            if (!isNil(term) && term.length >= this.ctrListMinSearchLength && this.term !== term) {\n                if (this.searchTimer) {\n                    this.searchTimer.unsubscribe();\n                    this.searchTimer = null;\n                }\n                if (!this.ctx.searching) {\n                    if (this.ctrListDisplaySearching) {\n                        this.ctx.results = [];\n                    }\n                    this.ctx.searching = true;\n                    this.ctx.searchInitialized = true;\n                    this.refreshTemplate();\n                }\n                if (this.clearTimer) {\n                    this.clearTimer.unsubscribe();\n                }\n                this.searchTimer = timer$1(this.ctrListPause).pipe(take(1)).subscribe(function () {\n                    _this.searchTimerComplete(term);\n                });\n            }\n            else if (!isNil(term) && term.length < this.ctrListMinSearchLength) {\n                this.clear();\n                this.term = \"\";\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CtrList.prototype.clear = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.searchTimer) {\n                this.searchTimer.unsubscribe();\n            }\n            this.clearTimer = timer$1(CLEAR_TIMEOUT).pipe(take(1)).subscribe(function () {\n                _this._clear();\n            });\n        };\n    /**\n     * @return {?}\n     */\n    CtrList.prototype.open = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.ctx.searchInitialized) {\n                this.search(\"\");\n            }\n            this.refreshTemplate();\n        };\n    /**\n     * @param {?} open\n     * @return {?}\n     */\n    CtrList.prototype.isOpen = /**\n     * @param {?} open\n     * @return {?}\n     */\n        function (open) {\n            this.ctx.isOpen = open;\n        };\n    /**\n     * @return {?}\n     */\n    CtrList.prototype._clear = /**\n     * @return {?}\n     */\n        function () {\n            if (this.searchTimer) {\n                this.searchTimer.unsubscribe();\n                this.searchTimer = null;\n            }\n            if (this.dataService) {\n                this.dataService.cancel();\n            }\n            this.viewContainer.clear();\n            this.viewRef = null;\n        };\n    /**\n     * @param {?} term\n     * @return {?}\n     */\n    CtrList.prototype.searchTimerComplete = /**\n     * @param {?} term\n     * @return {?}\n     */\n        function (term) {\n            // Begin the search\n            if (isNil(term) || term.length < this.ctrListMinSearchLength) {\n                this.ctx.searching = false;\n                return;\n            }\n            this.term = term;\n            this._dataService.search(term);\n        };\n    /**\n     * @return {?}\n     */\n    CtrList.prototype.refreshTemplate = /**\n     * @return {?}\n     */\n        function () {\n            // create the template if it doesn't exist\n            if (!this.viewRef) {\n                this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, this.ctx);\n            }\n            else if (!this.viewRef.destroyed) {\n                /** @type {?} */ ((\n                // refresh the template\n                this.viewRef)).context.isOpen = this.ctx.isOpen; /** @type {?} */\n                ((this.viewRef)).context.results = this.ctx.results; /** @type {?} */\n                ((this.viewRef)).context.searching = this.ctx.searching; /** @type {?} */\n                ((this.viewRef)).context.searchInitialized = this.ctx.searchInitialized;\n                this.viewRef.detectChanges();\n            }\n            this.cd.markForCheck();\n        };\n    /**\n     * @return {?}\n     */\n    CtrList.prototype.getBestMatchIndex = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.ctx.results || !this.term) {\n                return null;\n            }\n            // First try to find the exact term\n            var /** @type {?} */ bestMatch = this.ctx.results.findIndex(function (item) { return item.title.toLowerCase() === /** @type {?} */ ((_this.term)).toLocaleLowerCase(); });\n            // If not try to find the first item that starts with the term\n            if (bestMatch < 0) {\n                bestMatch = this.ctx.results.findIndex(function (item) { return item.title.toLowerCase().startsWith(/** @type {?} */ ((_this.term)).toLocaleLowerCase()); });\n            }\n            // If not try to find the first item that includes the term\n            if (bestMatch < 0) {\n                bestMatch = this.ctx.results.findIndex(function (item) { return item.title.toLowerCase().includes(/** @type {?} */ ((_this.term)).toLocaleLowerCase()); });\n            }\n            return bestMatch < 0 ? null : bestMatch;\n        };\n    /**\n     * @return {?}\n     */\n    CtrList.prototype.dataServiceSubscribe = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this._dataService) {\n                this._dataService.pipe(catchError(function (err) {\n                    console.error(err);\n                    console.error(\"Unexpected error in dataService: errors should be handled by the dataService Observable\");\n                    return [];\n                }))\n                    .subscribe(function (results) {\n                    _this.ctx.searchInitialized = true;\n                    _this.ctx.searching = false;\n                    _this.ctx.results = results;\n                    if (_this.ctrListAutoMatch && results && results.length === 1 && results[0].title && !isNil(_this.term) &&\n                        results[0].title.toLocaleLowerCase() === /** @type {?} */ ((_this.term)).toLocaleLowerCase()) {\n                        // Do automatch\n                        // Do automatch\n                        _this.completer.onSelected(results[0]);\n                        return;\n                    }\n                    if (_this._initialValue) {\n                        _this.initialValue = _this._initialValue;\n                        _this._initialValue = null;\n                    }\n                    _this.refreshTemplate();\n                    if (_this.ctrListAutoHighlight) {\n                        _this.completer.autoHighlightIndex = _this.getBestMatchIndex();\n                    }\n                });\n                if (this._dataService.dataSourceChange) {\n                    this._dataService.dataSourceChange.subscribe(function () {\n                        _this.term = null;\n                        _this.ctx.searchInitialized = false;\n                        _this.ctx.searching = false;\n                        _this.ctx.results = [];\n                        _this.refreshTemplate();\n                        _this.completer.onDataSourceChange();\n                    });\n                }\n            }\n        };\n    return CtrList;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CtrRow = /*@__PURE__*/ (function () {\n    function CtrRow(el, renderer, dropdown) {\n        this.el = el;\n        this.renderer = renderer;\n        this.dropdown = dropdown;\n        this.selected = false;\n    }\n    /**\n     * @return {?}\n     */\n    CtrRow.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this._rowIndex) {\n                this.dropdown.unregisterRow(this._rowIndex);\n            }\n        };\n    Object.defineProperty(CtrRow.prototype, \"ctrRow\", {\n        set: /**\n         * @param {?} index\n         * @return {?}\n         */ function (index) {\n            this._rowIndex = index;\n            this.dropdown.registerRow(new CtrRowItem(this, this._rowIndex));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CtrRow.prototype, \"dataItem\", {\n        set: /**\n         * @param {?} item\n         * @return {?}\n         */ function (item) {\n            this._item = item;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CtrRow.prototype.onClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.dropdown.onSelected(this._item);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CtrRow.prototype.onMouseEnter = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.dropdown.highlightRow(this._rowIndex);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CtrRow.prototype.onMouseDown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.dropdown.rowMouseDown();\n        };\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    CtrRow.prototype.setHighlighted = /**\n     * @param {?} selected\n     * @return {?}\n     */\n        function (selected) {\n            this.selected = selected;\n            this.renderer.setElementClass(this.el.nativeElement, \"completer-selected-row\", this.selected);\n        };\n    /**\n     * @return {?}\n     */\n    CtrRow.prototype.getNativeElement = /**\n     * @return {?}\n     */\n        function () {\n            return this.el.nativeElement;\n        };\n    /**\n     * @return {?}\n     */\n    CtrRow.prototype.getDataItem = /**\n     * @return {?}\n     */\n        function () {\n            return this._item;\n        };\n    return CtrRow;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\"use strict\";\n/**\n * @record\n */\nvar CompleterListItemCmp = /*@__PURE__*/ (function () {\n    function CompleterListItemCmp() {\n        this.parts = [];\n    }\n    /**\n     * @return {?}\n     */\n    CompleterListItemCmp.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.searchStr) {\n                this.parts.push({ isMatch: false, text: this.text });\n                return;\n            }\n            var /** @type {?} */ matchStr = this.text.toLowerCase();\n            var /** @type {?} */ matchPos = matchStr.indexOf(this.searchStr.toLowerCase());\n            var /** @type {?} */ startIndex = 0;\n            while (matchPos >= 0) {\n                var /** @type {?} */ matchText = this.text.slice(matchPos, matchPos + this.searchStr.length);\n                if (matchPos === 0) {\n                    this.parts.push({ isMatch: true, text: matchText });\n                    startIndex += this.searchStr.length;\n                }\n                else if (matchPos > 0) {\n                    var /** @type {?} */ matchPart = this.text.slice(startIndex, matchPos);\n                    this.parts.push({ isMatch: false, text: matchPart });\n                    this.parts.push({ isMatch: true, text: matchText });\n                    startIndex += this.searchStr.length + matchPart.length;\n                }\n                matchPos = matchStr.indexOf(this.searchStr.toLowerCase(), startIndex);\n            }\n            if (startIndex < this.text.length) {\n                this.parts.push({ isMatch: false, text: this.text.slice(startIndex, this.text.length) });\n            }\n        };\n    return CompleterListItemCmp;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\"use strict\";\nvar noop = function () {\n    return;\n};\nvar COMPLETER_CONTROL_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return CompleterCmp; }),\n};\nvar CompleterCmp = /*@__PURE__*/ (function () {\n    function CompleterCmp(completerService, cdr) {\n        this.completerService = completerService;\n        this.cdr = cdr;\n        this.inputName = \"\";\n        this.inputId = \"\";\n        this.pause = PAUSE;\n        this.minSearchLength = MIN_SEARCH_LENGTH;\n        this.maxChars = MAX_CHARS;\n        this.overrideSuggested = false;\n        this.clearSelected = false;\n        this.clearUnselected = false;\n        this.fillHighlighted = true;\n        this.placeholder = \"\";\n        this.autoMatch = false;\n        this.disableInput = false;\n        this.autofocus = false;\n        this.openOnFocus = false;\n        this.openOnClick = false;\n        this.selectOnClick = false;\n        this.selectOnFocus = false;\n        this.autoHighlight = false;\n        this.selected = new EventEmitter();\n        this.highlighted = new EventEmitter();\n        this.blurEvent = new EventEmitter();\n        this.click = new EventEmitter();\n        this.focusEvent = new EventEmitter();\n        this.opened = new EventEmitter();\n        this.keyup = new EventEmitter();\n        this.keydown = new EventEmitter();\n        this.control = new FormControl(\"\");\n        this.displaySearching = true;\n        this.displayNoResults = true;\n        this._textNoResults = TEXT_NO_RESULTS;\n        this._textSearching = TEXT_SEARCHING;\n        this._onTouchedCallback = noop;\n        this._onChangeCallback = noop;\n        this._focus = false;\n        this._open = false;\n        this._searchStr = \"\";\n    }\n    Object.defineProperty(CompleterCmp.prototype, \"value\", {\n        get: /**\n         * @return {?}\n         */ function () { return this.searchStr; },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */ function (v) {\n            if (v !== this.searchStr) {\n                this.searchStr = v;\n            }\n            // Propagate the change in any case\n            this._onChangeCallback(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompleterCmp.prototype, \"searchStr\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._searchStr;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (typeof value === \"string\" || isNil(value)) {\n                this._searchStr = value;\n            }\n            else {\n                this._searchStr = JSON.stringify(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CompleterCmp.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.autofocus) {\n                this._focus = true;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CompleterCmp.prototype.ngAfterViewChecked = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this._focus) {\n                setTimeout(function () {\n                    _this.ctrInput.nativeElement.focus();\n                    _this._focus = false;\n                }, 0);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CompleterCmp.prototype.onTouched = /**\n     * @return {?}\n     */\n        function () {\n            this._onTouchedCallback();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CompleterCmp.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.searchStr = value;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CompleterCmp.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onChangeCallback = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CompleterCmp.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onTouchedCallback = fn;\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    CompleterCmp.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.disableInput = isDisabled;\n        };\n    Object.defineProperty(CompleterCmp.prototype, \"datasource\", {\n        set: /**\n         * @param {?} source\n         * @return {?}\n         */ function (source) {\n            if (source) {\n                if (source instanceof Array) {\n                    this.dataService = this.completerService.local(source);\n                }\n                else if (typeof (source) === \"string\") {\n                    this.dataService = this.completerService.remote(source);\n                }\n                else {\n                    this.dataService = /** @type {?} */ (source);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompleterCmp.prototype, \"textNoResults\", {\n        set: /**\n         * @param {?} text\n         * @return {?}\n         */ function (text) {\n            if (this._textNoResults !== text) {\n                this._textNoResults = text;\n                this.displayNoResults = !!this._textNoResults && this._textNoResults !== \"false\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompleterCmp.prototype, \"textSearching\", {\n        set: /**\n         * @param {?} text\n         * @return {?}\n         */ function (text) {\n            if (this._textSearching !== text) {\n                this._textSearching = text;\n                this.displaySearching = !!this._textSearching && this._textSearching !== \"false\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CompleterCmp.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.completer.selected.subscribe(function (item) {\n                _this.selected.emit(item);\n            });\n            this.completer.highlighted.subscribe(function (item) {\n                _this.highlighted.emit(item);\n            });\n            this.completer.opened.subscribe(function (isOpen) {\n                _this._open = isOpen;\n                _this.opened.emit(isOpen);\n            });\n        };\n    /**\n     * @return {?}\n     */\n    CompleterCmp.prototype.onBlur = /**\n     * @return {?}\n     */\n        function () {\n            this.blurEvent.emit();\n            this.onTouched();\n            this.cdr.detectChanges();\n        };\n    /**\n     * @return {?}\n     */\n    CompleterCmp.prototype.onFocus = /**\n     * @return {?}\n     */\n        function () {\n            this.focusEvent.emit();\n            this.onTouched();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CompleterCmp.prototype.onClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.click.emit(event);\n            this.onTouched();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CompleterCmp.prototype.onKeyup = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.keyup.emit(event);\n            event.stopPropagation();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CompleterCmp.prototype.onKeydown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.keydown.emit(event);\n            event.stopPropagation();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CompleterCmp.prototype.onChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.value = value;\n        };\n    /**\n     * @return {?}\n     */\n    CompleterCmp.prototype.open = /**\n     * @return {?}\n     */\n        function () {\n            this.completer.open();\n        };\n    /**\n     * @return {?}\n     */\n    CompleterCmp.prototype.close = /**\n     * @return {?}\n     */\n        function () {\n            this.completer.clear();\n        };\n    /**\n     * @return {?}\n     */\n    CompleterCmp.prototype.focus = /**\n     * @return {?}\n     */\n        function () {\n            if (this.ctrInput) {\n                this.ctrInput.nativeElement.focus();\n            }\n            else {\n                this._focus = true;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CompleterCmp.prototype.blur = /**\n     * @return {?}\n     */\n        function () {\n            if (this.ctrInput) {\n                this.ctrInput.nativeElement.blur();\n            }\n            else {\n                this._focus = false;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CompleterCmp.prototype.isOpen = /**\n     * @return {?}\n     */\n        function () {\n            return this._open;\n        };\n    return CompleterCmp;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar providers = [\n    CompleterService,\n    LocalDataFactory,\n    RemoteDataFactory\n];\nvar Ng2CompleterModule = /*@__PURE__*/ (function () {\n    function Ng2CompleterModule() {\n    }\n    /**\n     * @return {?}\n     */\n    Ng2CompleterModule.forRoot = /**\n     * @return {?}\n     */\n        function () {\n            return {\n                ngModule: Ng2CompleterModule,\n                providers: providers\n            };\n        };\n    /**\n     * @return {?}\n     */\n    Ng2CompleterModule.forChild = /**\n     * @return {?}\n     */\n        function () {\n            return {\n                ngModule: Ng2CompleterModule,\n                providers: providers\n            };\n        };\n    return Ng2CompleterModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Public classes.\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Entry point for all public APIs of the package.\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { LocalData, RemoteData, LocalDataFactory, RemoteDataFactory, CompleterService, CtrCompleter, CtrDropdown, CtrInput, CtrList, CtrRow, CompleterListItemCmp, CompleterCmp, Ng2CompleterModule, CtrListContext as ɵa, CompleterBaseData as ɵb };\n//# sourceMappingURL=ng2-completer.js.map\n",null]}