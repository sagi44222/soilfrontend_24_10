{"remainingRequest":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\smart\\lite_frontend_24_10_2018\\node_modules\\ng2-img-cropper\\src\\model\\dragMarker.js","dependencies":[{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\ng2-img-cropper\\src\\model\\dragMarker.js","mtime":1498555521000},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540452592066},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { Handle } from './handle';\r\nimport { PointPool } from './pointPool';\r\nvar DragMarker = /*@__PURE__*/ (function (_super) {\r\n    __extends(DragMarker, _super);\r\n    function DragMarker(x, y, radius, cropperSettings) {\r\n        var _this = _super.call(this, x, y, radius, cropperSettings) || this;\r\n        _this.iconPoints = [];\r\n        _this.scaledIconPoints = [];\r\n        _this.getDragIconPoints(_this.iconPoints, 1);\r\n        _this.getDragIconPoints(_this.scaledIconPoints, 1.2);\r\n        return _this;\r\n    }\r\n    DragMarker.prototype.draw = function (ctx) {\r\n        if (this.over || this.drag) {\r\n            this.drawIcon(ctx, this.scaledIconPoints);\r\n        }\r\n        else {\r\n            this.drawIcon(ctx, this.iconPoints);\r\n        }\r\n    };\r\n    DragMarker.prototype.getDragIconPoints = function (arr, scale) {\r\n        var maxLength = 17 * scale;\r\n        var arrowWidth = 14 * scale;\r\n        var arrowLength = 8 * scale;\r\n        var connectorThroat = 4 * scale;\r\n        arr.push(PointPool.instance.borrow(-connectorThroat / 2, maxLength - arrowLength));\r\n        arr.push(PointPool.instance.borrow(-arrowWidth / 2, maxLength - arrowLength));\r\n        arr.push(PointPool.instance.borrow(0, maxLength));\r\n        arr.push(PointPool.instance.borrow(arrowWidth / 2, maxLength - arrowLength));\r\n        arr.push(PointPool.instance.borrow(connectorThroat / 2, maxLength - arrowLength));\r\n        arr.push(PointPool.instance.borrow(connectorThroat / 2, connectorThroat / 2));\r\n        arr.push(PointPool.instance.borrow(maxLength - arrowLength, connectorThroat / 2));\r\n        arr.push(PointPool.instance.borrow(maxLength - arrowLength, arrowWidth / 2));\r\n        arr.push(PointPool.instance.borrow(maxLength, 0));\r\n        arr.push(PointPool.instance.borrow(maxLength - arrowLength, -arrowWidth / 2));\r\n        arr.push(PointPool.instance.borrow(maxLength - arrowLength, -connectorThroat / 2));\r\n        arr.push(PointPool.instance.borrow(connectorThroat / 2, -connectorThroat / 2));\r\n        arr.push(PointPool.instance.borrow(connectorThroat / 2, -maxLength + arrowLength));\r\n        arr.push(PointPool.instance.borrow(arrowWidth / 2, -maxLength + arrowLength));\r\n        arr.push(PointPool.instance.borrow(0, -maxLength));\r\n        arr.push(PointPool.instance.borrow(-arrowWidth / 2, -maxLength + arrowLength));\r\n        arr.push(PointPool.instance.borrow(-connectorThroat / 2, -maxLength + arrowLength));\r\n        arr.push(PointPool.instance.borrow(-connectorThroat / 2, -connectorThroat / 2));\r\n        arr.push(PointPool.instance.borrow(-maxLength + arrowLength, -connectorThroat / 2));\r\n        arr.push(PointPool.instance.borrow(-maxLength + arrowLength, -arrowWidth / 2));\r\n        arr.push(PointPool.instance.borrow(-maxLength, 0));\r\n        arr.push(PointPool.instance.borrow(-maxLength + arrowLength, arrowWidth / 2));\r\n        arr.push(PointPool.instance.borrow(-maxLength + arrowLength, connectorThroat / 2));\r\n        arr.push(PointPool.instance.borrow(-connectorThroat / 2, connectorThroat / 2));\r\n    };\r\n    DragMarker.prototype.drawIcon = function (ctx, points) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(points[0].x + this.position.x, points[0].y + this.position.y);\r\n        for (var k = 0; k < points.length; k++) {\r\n            var p = points[k];\r\n            ctx.lineTo(p.x + this.position.x, p.y + this.position.y);\r\n        }\r\n        ctx.closePath();\r\n        ctx.fillStyle = this.cropperSettings.cropperDrawSettings.dragIconFillColor;\r\n        ctx.fill();\r\n        ctx.lineWidth = this.cropperSettings.cropperDrawSettings.dragIconStrokeWidth;\r\n        ctx.strokeStyle = this.cropperSettings.cropperDrawSettings.dragIconStrokeColor;\r\n        ctx.stroke();\r\n    };\r\n    DragMarker.prototype.recalculatePosition = function (bounds) {\r\n        var c = bounds.getCentre();\r\n        this.setPosition(c.x, c.y);\r\n        PointPool.instance.returnPoint(c);\r\n    };\r\n    return DragMarker;\r\n}(Handle));\r\nexport { DragMarker };\r\n//# sourceMappingURL=dragMarker.js.map \r\n",null]}