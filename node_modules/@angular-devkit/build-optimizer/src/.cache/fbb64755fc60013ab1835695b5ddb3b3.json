{"remainingRequest":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\smart\\lite_frontend_24_10_2018\\node_modules\\ng2-file-upload\\file-upload\\file-item.class.js","dependencies":[{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\ng2-file-upload\\file-upload\\file-item.class.js","mtime":1511630168000},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540452592066},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nvar file_like_object_class_1 = require(\"./file-like-object.class\");\r\nvar FileItem = /*@__PURE__*/ (function () {\r\n    function FileItem(uploader, some, options) {\r\n        this.url = '/';\r\n        this.headers = [];\r\n        this.withCredentials = true;\r\n        this.formData = [];\r\n        this.isReady = false;\r\n        this.isUploading = false;\r\n        this.isUploaded = false;\r\n        this.isSuccess = false;\r\n        this.isCancel = false;\r\n        this.isError = false;\r\n        this.progress = 0;\r\n        this.index = void 0;\r\n        this.uploader = uploader;\r\n        this.some = some;\r\n        this.options = options;\r\n        this.file = new file_like_object_class_1.FileLikeObject(some);\r\n        this._file = some;\r\n        if (uploader.options) {\r\n            this.method = uploader.options.method || 'POST';\r\n            this.alias = uploader.options.itemAlias || 'file';\r\n        }\r\n        this.url = uploader.options.url;\r\n    }\r\n    FileItem.prototype.upload = function () {\r\n        try {\r\n            this.uploader.uploadItem(this);\r\n        }\r\n        catch (e) {\r\n            this.uploader._onCompleteItem(this, '', 0, {});\r\n            this.uploader._onErrorItem(this, '', 0, {});\r\n        }\r\n    };\r\n    FileItem.prototype.cancel = function () {\r\n        this.uploader.cancelItem(this);\r\n    };\r\n    FileItem.prototype.remove = function () {\r\n        this.uploader.removeFromQueue(this);\r\n    };\r\n    FileItem.prototype.onBeforeUpload = function () {\r\n        return void 0;\r\n    };\r\n    FileItem.prototype.onBuildForm = function (form) {\r\n        return { form: form };\r\n    };\r\n    FileItem.prototype.onProgress = function (progress) {\r\n        return { progress: progress };\r\n    };\r\n    FileItem.prototype.onSuccess = function (response, status, headers) {\r\n        return { response: response, status: status, headers: headers };\r\n    };\r\n    FileItem.prototype.onError = function (response, status, headers) {\r\n        return { response: response, status: status, headers: headers };\r\n    };\r\n    FileItem.prototype.onCancel = function (response, status, headers) {\r\n        return { response: response, status: status, headers: headers };\r\n    };\r\n    FileItem.prototype.onComplete = function (response, status, headers) {\r\n        return { response: response, status: status, headers: headers };\r\n    };\r\n    FileItem.prototype._onBeforeUpload = function () {\r\n        this.isReady = true;\r\n        this.isUploading = true;\r\n        this.isUploaded = false;\r\n        this.isSuccess = false;\r\n        this.isCancel = false;\r\n        this.isError = false;\r\n        this.progress = 0;\r\n        this.onBeforeUpload();\r\n    };\r\n    FileItem.prototype._onBuildForm = function (form) {\r\n        this.onBuildForm(form);\r\n    };\r\n    FileItem.prototype._onProgress = function (progress) {\r\n        this.progress = progress;\r\n        this.onProgress(progress);\r\n    };\r\n    FileItem.prototype._onSuccess = function (response, status, headers) {\r\n        this.isReady = false;\r\n        this.isUploading = false;\r\n        this.isUploaded = true;\r\n        this.isSuccess = true;\r\n        this.isCancel = false;\r\n        this.isError = false;\r\n        this.progress = 100;\r\n        this.index = void 0;\r\n        this.onSuccess(response, status, headers);\r\n    };\r\n    FileItem.prototype._onError = function (response, status, headers) {\r\n        this.isReady = false;\r\n        this.isUploading = false;\r\n        this.isUploaded = true;\r\n        this.isSuccess = false;\r\n        this.isCancel = false;\r\n        this.isError = true;\r\n        this.progress = 0;\r\n        this.index = void 0;\r\n        this.onError(response, status, headers);\r\n    };\r\n    FileItem.prototype._onCancel = function (response, status, headers) {\r\n        this.isReady = false;\r\n        this.isUploading = false;\r\n        this.isUploaded = false;\r\n        this.isSuccess = false;\r\n        this.isCancel = true;\r\n        this.isError = false;\r\n        this.progress = 0;\r\n        this.index = void 0;\r\n        this.onCancel(response, status, headers);\r\n    };\r\n    FileItem.prototype._onComplete = function (response, status, headers) {\r\n        this.onComplete(response, status, headers);\r\n        if (this.uploader.options.removeAfterUpload) {\r\n            this.remove();\r\n        }\r\n    };\r\n    FileItem.prototype._prepareToUploading = function () {\r\n        this.index = this.index || ++this.uploader._nextIndex;\r\n        this.isReady = true;\r\n    };\r\n    return FileItem;\r\n}());\r\nexports.FileItem = FileItem;\r\n",null]}