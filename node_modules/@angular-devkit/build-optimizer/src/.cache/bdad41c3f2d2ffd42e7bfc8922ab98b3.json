{"remainingRequest":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\smart\\lite_frontend_24_10_2018\\node_modules\\ngx-quill\\src\\quill-editor.component.js","dependencies":[{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\ngx-quill\\src\\quill-editor.component.js","mtime":1521457665000},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540452592066},{"path":"C:\\smart\\lite_frontend_24_10_2018\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, Output, Renderer2, ViewEncapsulation } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport * as QuillNamespace from 'quill';\nvar Quill = QuillNamespace;\nvar QuillEditorComponent = /*@__PURE__*/ (function () {\n    function QuillEditorComponent(elementRef, doc, renderer, zone) {\n        this.elementRef = elementRef;\n        this.doc = doc;\n        this.renderer = renderer;\n        this.zone = zone;\n        this.emptyArray = [];\n        this.defaultModules = {\n            toolbar: [\n                ['bold', 'italic', 'underline', 'strike'],\n                // toggled buttons\n                ['blockquote', 'code-block'],\n                [{ header: 1 }, { header: 2 }],\n                // custom button values\n                [{ list: 'ordered' }, { list: 'bullet' }],\n                [{ script: 'sub' }, { script: 'super' }],\n                // superscript/subscript\n                [{ indent: '-1' }, { indent: '+1' }],\n                // outdent/indent\n                [{ direction: 'rtl' }],\n                // text direction\n                [{ size: ['small', false, 'large', 'huge'] }],\n                // custom dropdown\n                [{ header: [1, 2, 3, 4, 5, 6, false] }],\n                [\n                    { color: this.emptyArray.slice() },\n                    { background: this.emptyArray.slice() }\n                ],\n                // dropdown with defaults from theme\n                [{ font: this.emptyArray.slice() }],\n                [{ align: this.emptyArray.slice() }],\n                ['clean'],\n                // remove formatting button\n                ['link', 'image', 'video'] // link and image, video\n            ]\n        };\n        this.style = {};\n        this.strict = true;\n        this.customOptions = [];\n        this.onEditorCreated = new EventEmitter();\n        this.onContentChanged = new EventEmitter();\n        this.onSelectionChanged = new EventEmitter();\n        this.valueGetter = function (quillEditor, editorElement) {\n            var html = editorElement.children[0].innerHTML;\n            if (html === '<p><br></p>' || html === '<div><br><div>') {\n                html = null;\n            }\n            return html;\n        };\n        this.valueSetter = function (quillEditor, value) {\n            return quillEditor.clipboard.convert(value);\n        };\n        this.onModelChange = function () { };\n        this.onModelTouched = function () { };\n    }\n    QuillEditorComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        var toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\n        var modules = this.modules || this.defaultModules;\n        var placeholder = 'Insert text here ...';\n        if (this.placeholder !== null && this.placeholder !== undefined) {\n            placeholder = this.placeholder.trim();\n        }\n        if (toolbarElem) {\n            modules['toolbar'] = toolbarElem;\n        }\n        this.elementRef.nativeElement.insertAdjacentHTML('beforeend', '<div quill-editor-element></div>');\n        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');\n        if (this.style) {\n            Object.keys(this.style).forEach(function (key) {\n                _this.renderer.setStyle(_this.editorElem, key, _this.style[key]);\n            });\n        }\n        this.customOptions.forEach(function (customOption) {\n            var newCustomOption = Quill.import(customOption.import);\n            newCustomOption.whitelist = customOption.whitelist;\n            Quill.register(newCustomOption, true);\n        });\n        this.quillEditor = new Quill(this.editorElem, {\n            modules: modules,\n            placeholder: placeholder,\n            readOnly: this.readOnly || false,\n            theme: this.theme || 'snow',\n            formats: this.formats,\n            bounds: this.bounds ? (this.bounds === 'self' ? this.editorElem : this.bounds) : this.doc.body,\n            strict: this.strict,\n            scrollingContainer: this.scrollingContainer\n        });\n        if (this.content) {\n            var contents = this.quillEditor.clipboard.convert(this.content);\n            this.quillEditor.setContents(contents);\n            this.quillEditor.history.clear();\n        }\n        this.onEditorCreated.emit(this.quillEditor);\n        // mark model as touched if editor lost focus\n        this.quillEditor.on('selection-change', function (range, oldRange, source) {\n            _this.zone.run(function () {\n                _this.onSelectionChanged.emit({\n                    editor: _this.quillEditor,\n                    range: range,\n                    oldRange: oldRange,\n                    source: source\n                });\n                if (!range) {\n                    _this.onModelTouched();\n                }\n            });\n        });\n        // update model if text changes\n        this.quillEditor.on('text-change', function (delta, oldDelta, source) {\n            var text = _this.quillEditor.getText();\n            var html = _this.editorElem.children[0].innerHTML;\n            if (html === '<p><br></p>' || html === '<div><br><div>') {\n                html = null;\n            }\n            _this.zone.run(function () {\n                _this.onModelChange(_this.valueGetter(_this.quillEditor, _this.editorElem));\n                _this.onContentChanged.emit({\n                    editor: _this.quillEditor,\n                    html: html,\n                    text: text,\n                    delta: delta,\n                    oldDelta: oldDelta,\n                    source: source\n                });\n            });\n        });\n    };\n    QuillEditorComponent.prototype.ngOnChanges = function (changes) {\n        if (!this.quillEditor) {\n            return null;\n        }\n        if (changes['readOnly']) {\n            this.quillEditor.enable(!changes['readOnly'].currentValue);\n        }\n        if (changes['placeholder']) {\n            this.quillEditor.root.dataset.placeholder =\n                changes['placeholder'].currentValue;\n        }\n    };\n    QuillEditorComponent.prototype.writeValue = function (currentValue) {\n        this.content = currentValue;\n        if (this.quillEditor) {\n            if (currentValue) {\n                this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));\n                return;\n            }\n            this.quillEditor.setText('');\n        }\n    };\n    QuillEditorComponent.prototype.registerOnChange = function (fn) {\n        this.onModelChange = fn;\n    };\n    QuillEditorComponent.prototype.registerOnTouched = function (fn) {\n        this.onModelTouched = fn;\n    };\n    QuillEditorComponent.prototype.validate = function () {\n        if (!this.quillEditor) {\n            return null;\n        }\n        var err = {}, valid = true;\n        var textLength = this.quillEditor.getText().trim().length;\n        if (this.minLength && textLength && textLength < this.minLength) {\n            err.minLengthError = {\n                given: textLength,\n                minLength: this.minLength\n            };\n            valid = false;\n        }\n        if (this.maxLength && textLength > this.maxLength) {\n            err.maxLengthError = {\n                given: textLength,\n                maxLength: this.maxLength\n            };\n            valid = false;\n        }\n        if (this.required && !textLength) {\n            err.requiredError = {\n                empty: true\n            };\n            valid = false;\n        }\n        return valid ? null : err;\n    };\n    return QuillEditorComponent;\n}());\nexport { QuillEditorComponent };\n//# sourceMappingURL=quill-editor.component.js.map \n",null]}